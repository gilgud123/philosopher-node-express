{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Philosopher Quote Express",
    "description": "A Philosopher Quote REST API that provides a database of philosopher quotes.",
    "contact": {
      "name": "kdv.code@gmail.com"
    }
  },
  "host": "none",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/philosopher": {
      "get": {
        "description": "Returns the list of all philosophers in the database",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of philosophers.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/models/Philosopher"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new philosopher",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A philosopher object.",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/models/Philosopher"
              }
            }
          }
        }
      }
    },
    "/philosopher/:id": {
      "get": {
        "description": "Returns the philosopher with the given id",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A philosopher object.",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/models/Philosopher"
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the description field of the philosopher with the given id",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "An updated philosopher object.",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/models/Philosopher"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes the philosopher with the given id",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The deleted philosopher object",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/models/Philosopher"
              }
            }
          }
        }
      }
    },
    "/philosopher/category/:category": {
      "get": {
        "description": "Returns a list of philosophers for the given category",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of philosophers.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/models/Philosopher"
              }
            }
          }
        }
      }
    },
    "/philosopher/name/:name": {
      "get": {
        "description": "Returns the philosopher with the given name",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A philosopher object.",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/models/Philosopher"
              }
            }
          }
        }
      }
    },
    "/quote": {
      "get": {
        "description": "Returns the list of all quotes in the database",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of quotes.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/models/Quote"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new Quote",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A quote object.",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/models/Quote"
              }
            }
          }
        }
      }
    },
    "/quote/:id": {
      "get": {
        "description": "Returns the quote with the given id",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A quote object.",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/models/Quote"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes the quote with the given id",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The deleted quote object",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/models/Quote"
              }
            }
          }
        }
      }
    },
    "/quote/topic/:topic": {
      "get": {
        "description": "Returns a list of quotes with the given topic",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of quote objects.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/models/Quote"
              }
            }
          }
        }
      }
    },
    "/quote/philosopher/:name": {
      "get": {
        "description": "Returns the quotes by philosopher with the given name",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of quote objects.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/models/Quote"
              }
            }
          }
        }
      }
    },
    "/topic": {
      "get": {
        "description": "Returns the list of all topics in the database",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of topics.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/models/Topic"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new topic",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A topic object.",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/models/Topic"
              }
            }
          }
        }
      }
    },
    "/topic/:id": {
      "get": {
        "description": "Returns the topic with the given id",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A topic object.",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/models/Topic"
              }
            }
          }
        }
      },
      "put": {
        "description": "Updates the topic with the given id",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A topic object.",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/models/topic"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes the topic with the given id",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The deleted topic object",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/models/Topic"
              }
            }
          }
        }
      }
    },
    "/topic/name/:name": {
      "get": {
        "description": "Returns the topic by name",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A topic object.",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/models/Topic"
              }
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "description": "Returns the list of all user in the database. Admin authorization required.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of users.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/models/User"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new user. Admin authorization required.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A user object.",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/models/User"
              }
            }
          }
        }
      }
    },
    "/user/:id": {
      "get": {
        "description": "Returns the user with the given id. Authorization: admin or user with the same id.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A user object.",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/models/User"
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the user with the given id. Authorization: admin or user with the same id.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A user object.",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/models/User"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes the user with the given id. Authorization: admin or user with the same id.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The deleted user object",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/models/User"
              }
            }
          }
        }
      }
    },
    "/authentication/authenticate": {
      "post": {
        "description": "Authenticates the login by email and password.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A JWT token"
            },
          "400": {
            "description": "Unauthorized!"
          }
          }
        }
      }
  },
  "definitions": {
    "Philosopher": {
      "type": "object",
      "required": [
        "id",
        "name",
        "description"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "categories": {
          "type": "array"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "Quote" : {
      "type": "object",
      "required": [
        "id",
        "text",
        "philosopher"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "topics": {
          "type": "array"
        }
      }
    },
    "Topic" : {
      "type": "object",
      "required": [
        "id",
        "text"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "text": {
          "type": "string"
        }
      }
    },
    "User" : {
      "type": "object",
      "required": [
        "id",
        "name",
        "email",
        "password"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": ["user", "admin"]
        },
        "resetPasswordToken": {
          "type": "string"
        }
      }
    }
  }
}